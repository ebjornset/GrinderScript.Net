### Starting point for your own grinder.properties when using GrinderScript.Net

################################################################################################
### Load variation stuff, adjust to your own needs
################################################################################################

grinder.duration=30000
grinder.runs=0

grinder.sleepTimeFactor=1
grinder.sleepTimeVariation=1

grinder.processes=1
grinder.threads=1

grinder.initialProcesses=1
grinder.processIncrement=1

grinder.processIncrementInterval=5000
grinder.initialSleepTime=5000

################################################################################################
## Update this to the actual number of load agents if you use a datapool with distributionMode=ThreadUnique
################################################################################################
#grinderscript-dotnet.agentCount=1

################################################################################################
### Actual load test
################################################################################################
grinderscript-dotnet.workerType=<Name of your load test type>

# Use this if you will compose your load test from several self contained load test worker types
# Remember to compose the test run with WorkerGroup properties, see example further down
#grinderscript-dotnet.workerType=GrinderScript.Net.Core.Framework.WorkerGroup, GrinderScript.Net.Core

################################################################
## The assembly containing the tests. 
################################################################
grinder.script=<Name of your load test assembly>.dll

################################################################
## Location of the folder where additional assemblies (dlls) can be found
################################################################
#grinderscript-dotnet.binFolder=

################################################################################################
### Test scenario composition, when using
### grinderscript-dotnet.workerType=GrinderScript.Net.Core.Framework.ScenarioWorker, GrinderScript.Net.Core
################################################################################################

#grinderscript-dotnet.scenarioWorker.1.workerType=<Name of your first load test type>
#grinderscript-dotnet.scenarioWorker.1.loadFactor=5

#grinderscript-dotnet.scenarioWorker.2.workerType=<Name of your second load test type>
#grinderscript-dotnet.scenarioWorker.2.loadFactor=2

#grinderscript-dotnet.scenarioWorker.<n>.workerType=<Name of your n-th load test type>
#grinderscript-dotnet.scenarioWorker.<n>.loadFactor=99

#grinderscript-dotnet.scenarioWorker.random=true
#grinderscript-dotnet.scenarioWorker.seed=123456
#grinderscript-dotnet.scenarioWorker.firstElement=1
#grinderscript-dotnet.scenarioWorker.lastElement=1

################################################################
### Datapool configuration. 
################################################################
#grinderscript-dotnet.datapoolFactory.1=MyDatapool
#grinderscript-dotnet.datapool.MyDatapool.valueType=<Name of your data pool value type>
#grinderscript-dotnet.datapool.MyDatapool.factoryType=GrinderScript.Net.Core.CsvDatapoolValuesFactory`1, GrinderScript.Net.Core
#grinderscript-dotnet.datapool.MyDatapool.random=true
#grinderscript-dotnet.datapool.MyDatapool.seed=428653
#grinderscript-dotnet.datapool.Credentials.distributionMode=ThreadShared|ThreadUnique|ThreadComplete
#grinderscript-dotnet.datapool.MyDatapool.circular=true
#grinderscript-dotnet.datapool.MyDatapool.csvFile=<Name of CSV file with datapool values>.csv

################################################################################################
### Misc properties
################################################################################################

################################################################
## Set this to true if you want Jni4Net to be verbose during initialization
################################################################
#grinderscript-dotnet.bridgeVerbose=true

################################################################
## Set this to true if you want to attache a .Net debugger to the process.
################################################################
#grinderscript-dotnet.launchDebugger=true

################################################################################################
### JVM arguments passet to the worker processes
################################################################################################
# Her you can control log levels, memory setting etc.
#grinder.jvm.arguments=-Dgrinder.logLevel=warn -Xms128m -Xmx512m

################################################################################################
### Log levels can be cached in the CLR, to minimize calls to the JVM to read these.
################################################################################################
#grinderscript-dotnet.loggerEnabledCacheTtl=-1

################################################################################################
### Stuff we just need
################################################################################################
grinder.dcrinstrumentation=true
grinder.logDirectory=logs