################################
# Load variation stuff
################################
grinder.processes=1

grinder.threads=1
grinder.processIncrementInterval=120000
grinder.initialSleepTime=0
grinder.duration=10000

grinder.runs=1000

grinder.initialProcesses=1
grinder.processIncrement=1

grinder.sleepTimeFactor=0
grinder.sleepTimeVariation=0.9

################################
# Test configuration stuff
################################
grinder.script=GrinderScript.Net.Examples.dll
grinderscript-dotnet.workerType=GrinderScript.Net.Examples.ExampleWorker, GrinderScript.Net.Examples

#grinderscript-dotnet.binFolder=target\\test\\config
#grinderscript-dotnet.binFolder=C:\\Program Files (x86)\\DIPS\\Arena.Grinder
################################
# Test collection stuff
################################
# Actual tests
# Each property prefixed with 'grinderscript-dotnet-worker-collection.<n>' where <n> is an positive integer configures on test worker in the collection
# grinderscript-dotnet-worker-collection.<n>.workerType:
# The actual C# implementation of the worker. Uses standard C# type names, see http://XXXX.YYY/ZZZZ
# grinderscript-dotnet-worker-collection.<n>.loadFactor: 
# Positive integer indicating how heavy this test worker will be used in the test. Default = 1, making all test workers are used equally

#grinderscript-dotnet-worker-collection.4.workerType=Grinder.Script.Example.ExampleWorker, Grinder.Script.Example
#grinderscript-dotnet-worker-collection.4.loadFactor=5

# Configuration

# Should each collection worker run just a single test worker in the collection or run all in sequence? Default = true (Run a single test)
# When running in sequence each test worker is run #loadFactor times.
#grinderscript-dotnet-worker-collection.singleTest=true

# Should each test worker be picked at random by the collection worker, or should they be picket sequencial? Default = true (Pick a worker at random)
#grinderscript-dotnet-worker-collection.random=true

# Seed to use for random selection. If specified each run with the same worker collection and load factor will perform the same run. 
# Default is currentTimeMillis, producing a possible new run combination each time
#grinderscript-dotnet-worker-collection.seed=1

# What range in the test worker collection should we scan for workers? 
# This make it easy to use just a sub range of test workers in a huge list of possible test workers
# First element to use, default = 1
grinderscript-dotnet-worker-collection.firstElement=1
# Last element to use, default = 100
grinderscript-dotnet-worker-collection.lastElement=6

################################
# Stuff we just need
################################
grinder.dcrinstrumentation=true
#grinder.logDirectory is always overwritten by maven grinderplugin, so this is not used when running from maven
grinder.logDirectory=logs

################################
# For debug purposes
################################
grinderscript-dotnet.bridgeVerbose=true
grinderscript-dotnet.bridgeDebug=true

################################
# Not working yet, waiting for jni4net to support loading stuff fronm separate folders
################################
#grinderscript-dotnet.bridgeAssembly=C:\\Users\\ebj\\.m2\\repository\\grinderscript-dotnet-scriptengine\\grinderscript-dotnet-scriptengine\\1.0-SNAPSHOT\\Grinder.Script.j4n.dll
#grinderscript-dotnet.scriptAssembly=C:\\Users\\ebj\\.m2\\repository\\grinderscript-dotnet-scriptengine\\grinderscript-dotnet-scriptengine\\1.0-SNAPSHOT\\Grinder.Script.dll
